name: Deploy Staging

on:
  push:
    branches:
      - develop

env:
  ENVIRONMENT_NAME: staging
  SERVER_PUBLIC_IP: "15.236.168.171"

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v1
        with:
          node-version: 12
      - uses: actions/cache@v2
        with:
          path: "**/node_modules"
          key: ${{ runner.os }}-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-
      - run: echo -e "//npm.pkg.github.com/:_authToken=$NPM_TOKEN\n@amfa-team:registry=https://npm.pkg.github.com" > .npmrc
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
      - run: yarn install --ignore-scripts
      - name: publish sdk
        run: yarn npm:release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_SDK }}
      - uses: TickX/var-to-dotenv@v1.1.1
        with:
          key: "SENTRY_DNS"
          value: ${{secrets.SENTRY_EXAMPLE_DNS}}
          envPath: "packages/example/.env"
      - uses: TickX/var-to-dotenv@v1.1.1
        with:
          key: "WS_API"
          value: ${{secrets.STAGING_WEBSOCKET}}
          envPath: "packages/example/.env"
      - uses: TickX/var-to-dotenv@v1.1.1
        with:
          key: "HTTP_API"
          value: ${{secrets.STAGING_CLUSTER_API}}
          envPath: "packages/example/.env"
      - uses: TickX/var-to-dotenv@v1.1.1
        with:
          key: "SENTRY_ENVIRONMENT"
          value: ${{env.ENVIRONMENT_NAME}}
          envPath: "packages/example/.env"
      - name: build
        run: yarn build
        env:
          SENTRY_ENVIRONMENT: ${{env.ENVIRONMENT_NAME}}
      - name: deploy
        working-directory: ./packages/example
        run: yarn aws:profile:set --stage staging && yarn deploy:staging
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      - name: Slack Notification
        uses: rtCamp/action-slack-notify@master
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_SDK }}
          SLACK_CHANNEL: deploys
          SLACK_TITLE: picnic-sfu/example deployed
      - name: serverless deploy
        working-directory: ./packages/api
        run: yarn aws:profile:set --stage staging && yarn deploy:staging
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          SENTRY_API_DNS: ${{ secrets.SENTRY_API_DNS }}
          SECRET: ${{ secrets.STAGING_CLUSTER_SECRET }}
      - name: Create SSH directory
        run: mkdir -p ~/.ssh
      - name: Create SSH Private Key
        run: echo "$SSH_KEY" > ~/.ssh/picnic && chmod 600 ~/.ssh/picnic
        env:
          SSH_KEY: ${{ secrets.SSH_KEY }}
      - run: eval "$(ssh-agent -s)" && ssh-add ~/.ssh/picnic
        name: register ssh agent
      - run: yarn build
        working-directory: ./packages/server
      - run: yarn deploy
        working-directory: ./packages/server
        env:
          CLUSTER_API: ${{ secrets.STAGING_CLUSTER_API }}
          CLUSTER_SECRET: ${{ secrets.STAGING_CLUSTER_SECRET }}
          PUBLIC_IP: ${{ env.SERVER_PUBLIC_IP }}
          SENTRY_ENVIRONMENT: ${{env.ENVIRONMENT_NAME}}
      - name: Slack Notification
        uses: rtCamp/action-slack-notify@master
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_SDK }}
          SLACK_CHANNEL: deploys
          SLACK_TITLE: Mediasoup Server deployed
      - name: Slack Notification
        uses: rtCamp/action-slack-notify@master
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_SDK }}
          SLACK_CHANNEL: deploys
          SLACK_TITLE: Mediasoup Server FAILED
          SLACK_COLOR: "#2eb886"
        if: failure()
