name: Deploy Staging

on:
  push:
    branches:
      - develop
      - improvment/sbs-template

env:
  ENVIRONMENT_NAME: staging

jobs:
  install: # Runs install once before everything to create & save cache
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v1
        with:
          node-version: 12
      - uses: actions/cache@v2
        with:
          path: "**/node_modules"
          key: ${{ runner.os }}-${{ hashFiles('**/yarn.lock') }}
      - run: echo '@amfa-team:registry=https://npm.pkg.github.com' > .npmrc
      - run: yarn install
  deploy-react:
    runs-on: ubuntu-latest
    needs: install
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v1
        with:
          node-version: 12
      - uses: actions/cache@v2
        with:
          path: "**/node_modules"
          key: ${{ runner.os }}-${{ hashFiles('**/yarn.lock') }}
      - run: echo '@amfa-team:registry=https://npm.pkg.github.com' > .npmrc
      - run: yarn install
      - name: publish sdk
        working-directory: ./packages/react
        run: yarn semantic-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_SDK }}
  deploy-example:
    runs-on: ubuntu-latest
    needs: install
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v1
        with:
          node-version: 12
      - uses: actions/cache@v2
        with:
          path: "**/node_modules"
          key: ${{ runner.os }}-${{ hashFiles('**/yarn.lock') }}
      - run: echo '@amfa-team:registry=https://npm.pkg.github.com' > .npmrc
      - run: yarn install
      - uses: TickX/var-to-dotenv@v1.1.1
        with:
          key: "SENTRY_DNS"
          value: ${{secrets.SENTRY_EXAMPLE_DNS}}
          envPath: "packages/example/.env"
      - uses: TickX/var-to-dotenv@v1.1.1
        with:
          key: "WS_API"
          value: ${{secrets.STAGING_WEBSOCKET}}
          envPath: "packages/example/.env"
      - uses: TickX/var-to-dotenv@v1.1.1
        with:
          key: "HTTP_API"
          value: ${{secrets.STAGING_CLUSTER_API}}
          envPath: "packages/example/.env"
      - name: build
        run: yarn build
        env:
          SENTRY_ENVIRONMENT: "staging"
      - name: deploy
        working-directory: ./packages/example
        run: yarn aws:profile:set --stage staging && yarn deploy:staging
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      - name: Slack Notification
        uses: rtCamp/action-slack-notify@master
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_SDK }}
          SLACK_CHANNEL: deploys
          SLACK_TITLE: picnic-sfu/example deployed
  deploy-api:
    runs-on: ubuntu-latest
    needs: install
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v1
        with:
          node-version: 12
      - uses: actions/cache@v2
        with:
          path: "**/node_modules"
          key: ${{ runner.os }}-${{ hashFiles('**/yarn.lock') }}
      - run: echo '@amfa-team:registry=https://npm.pkg.github.com' > .npmrc
      - run: yarn install
      - name: serverless deploy
        working-directory: ./packages/api
        run: yarn aws:profile:set --stage staging && yarn deploy:staging
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          SENTRY_DNS: ${{ secrets.SENTRY_API_DNS }}
          SECRET: ${{ secrets.STAGING_CLUSTER_SECRET }}
  deploy-server:
    runs-on: ubuntu-latest
    needs: install
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v1
        with:
          node-version: 12
      - uses: actions/cache@v2
        with:
          path: "**/node_modules"
          key: ${{ runner.os }}-${{ hashFiles('**/yarn.lock') }}
      - run: echo '@amfa-team:registry=https://npm.pkg.github.com' > .npmrc
      - run: yarn install
      - run: node dumpEnv.js
        name: generate env file
        working-directory: ./packages/server
        env:
          CLUSTER_API: ${{ secrets.STAGING_CLUSTER_API }}
          CLUSTER_SECRET: ${{ secrets.STAGING_CLUSTER_SECRET }}
          PUBLIC_IP: "15.236.169.203" # TODO
      - run: yarn build
        working-directory: packages/server
      - name: Generate deployment package
        working-directory: packages/server/dist
        run: zip -r deploy.zip .
      - name: Get timestamp
        uses: gerred/actions/current-time@master
        id: current-time
      - name: Run string replace
        uses: frabert/replace-string-action@master
        id: format-time
        with:
          pattern: '[:\.]+'
          string: "${{ steps.current-time.outputs.time }}"
          replace-with: "-"
          flags: "g"
      - name: Deploy to EB
        uses: einaregilsson/beanstalk-deploy@v13
        with:
          aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          application_name: picnic-sfu-server
          environment_name: ${{ env.ENVIRONMENT_NAME }}
          region: eu-west-3
          version_label: "my-app-${{ steps.format-time.outputs.replaced }}"
          deployment_package: ./packages/server/dist/deploy.zip
      - name: Slack Notification
        uses: rtCamp/action-slack-notify@master
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_SDK }}
          SLACK_CHANNEL: deploys
          SLACK_TITLE: Mediasoup Server deployed
      - name: Slack Notification
        uses: rtCamp/action-slack-notify@master
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_SDK }}
          SLACK_CHANNEL: deploys
          SLACK_TITLE: Mediasoup Server FAILED
          SLACK_COLOR: "#2eb886"
        if: failure()
