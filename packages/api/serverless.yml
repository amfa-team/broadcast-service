org: moroine
app: broadcast-service-api
service:
  name: broadcast-service-api

plugins:
  # - serverless-dotenv-plugin
  - serverless-stage-manager
  - serverless-pseudo-parameters
  - serverless-plugin-monorepo
  - serverless-plugin-typescript
  - serverless-plugin-include-dependencies
  - serverless-dynamodb-local
  - serverless-offline

provider:
  name: aws
  runtime: nodejs12.x
  region: eu-west-3
  profile: picnic # aws credential profile name
  websocketsApiRouteSelectionExpression: $request.body.action # custom routes are selected by the value of the action property in the body
  environment:
    SECRET: ${param:secret, 'super-SECRET'}
  iamRoleStatements: # permissions for all of your functions can be set here
    - Effect: Allow
      Action: # Gives permission to DynamoDB tables in a specific region
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:#{AWS::Region}:#{AWS::AccountId}:*"
package:
  individually: true

functions:
  registerParticipant:
    handler: src/admin/handler.registerParticipant
    events:
      - http:
          path: /admin/participant
          method: post
          cors:
            origin: "*" # <-- Specify allowed origin
            headers: # <-- Specify allowed headers
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: false
  topology:
    handler: src/admin/handler.topology
    events:
      - http:
          path: /admin/topology
          method: get
          cors:
            origin: "*" # <-- Specify allowed origin
            headers: # <-- Specify allowed headers
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: false
  registerServer:
    handler: src/admin/handler.registerServer
    events:
      - http:
          path: /admin/server
          method: post
  sfu_routerCapabilities:
    handler: src/sfu/handler.routerCapabilities
    events:
      - websocket:
          route: /sfu/router-capabilities
          routeResponseSelectionExpression: $default
  sfu_initConnect:
    handler: src/sfu/handler.initConnect
    events:
      - websocket:
          route: /sfu/connect/init
          routeResponseSelectionExpression: $default
  sfu_createConnect:
    handler: src/sfu/handler.createConnect
    events:
      - websocket:
          route: /sfu/connect/create
          routeResponseSelectionExpression: $default
  sfu_createSend:
    handler: src/sfu/handler.createSend
    events:
      - websocket:
          route: /sfu/send/create
          routeResponseSelectionExpression: $default
  sfu_getStreams:
    handler: src/sfu/handler.getStreams
    events:
      - websocket:
          route: /sfu/send/list
          routeResponseSelectionExpression: $default
  sfu_createReceive:
    handler: src/sfu/handler.createReceive
    events:
      - websocket:
          route: /sfu/receive/create
          routeResponseSelectionExpression: $default
  sfu_playReceive:
    handler: src/sfu/handler.playReceive
    events:
      - websocket:
          route: /sfu/receive/play
          routeResponseSelectionExpression: $default
  disconnect:
    handler: src/sfu/handler.disconnect
    events:
      - websocket: $disconnect

resources:
  Resources:
    participantTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: participants
        AttributeDefinitions:
          - AttributeName: token
            AttributeType: S
        KeySchema:
          - AttributeName: token
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    serverTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: servers
        AttributeDefinitions:
          - AttributeName: ip
            AttributeType: S
        KeySchema:
          - AttributeName: ip
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    connectionTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: connections
        AttributeDefinitions:
          - AttributeName: connectionId
            AttributeType: S
        KeySchema:
          - AttributeName: connectionId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    streamTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: streams
        AttributeDefinitions:
          - AttributeName: transportId
            AttributeType: S
          - AttributeName: producerId
            AttributeType: S
        KeySchema:
          - AttributeName: transportId
            KeyType: HASH
          - AttributeName: producerId
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    consumerStreamTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: consumer-streams
        AttributeDefinitions:
          - AttributeName: sourceTransportId
            AttributeType: S
          - AttributeName: transportId
            AttributeType: S
        KeySchema:
          - AttributeName: sourceTransportId
            KeyType: HASH
          - AttributeName: transportId
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

custom:
  serverless-offline:
    useChildProcesses: true
  dynamodb:
    stages:
      - dev
    start:
      port: 9005
      isMemory: true
      migrate: true
  stages:
    - dev
    - production
